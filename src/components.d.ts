/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';




export namespace Components {

  interface SlotIcon {
    /**
    * Fill color (default 'none')
    */
    'fill': string;
    /**
    * The Icon name (default '')
    */
    'icon': string;
    /**
    * Scale the icon size (default 1)
    */
    'scale': number;
    /**
    * Stroke color (default 'currentColor)
    */
    'stroke': string;
    /**
    * Stroke width (default 2)
    */
    'strokeWidth': string;
  }
  interface SlotIconAttributes extends StencilHTMLAttributes {
    /**
    * Fill color (default 'none')
    */
    'fill'?: string;
    /**
    * The Icon name (default '')
    */
    'icon'?: string;
    /**
    * Scale the icon size (default 1)
    */
    'scale'?: number;
    /**
    * Stroke color (default 'currentColor)
    */
    'stroke'?: string;
    /**
    * Stroke width (default 2)
    */
    'strokeWidth'?: string;
  }

  interface SlotPalugadabetBadge {
    'link': string;
    'name': string;
    'textMode'?: string;
  }
  interface SlotPalugadabetBadgeAttributes extends StencilHTMLAttributes {
    'link'?: string;
    'name'?: string;
    'textMode'?: string;
  }

  interface SlotPalugadabet {
    /**
    * URL for link attached to the Brand
    */
    'link': string;
    /**
    * Your Brand, (default to 'Brand')
    */
    'name': string;
    /**
    * (optional) Display along with the Brand Text
    */
    'withText'?: string;
  }
  interface SlotPalugadabetAttributes extends StencilHTMLAttributes {
    /**
    * URL for link attached to the Brand
    */
    'link'?: string;
    /**
    * Your Brand, (default to 'Brand')
    */
    'name'?: string;
    /**
    * (optional) Display along with the Brand Text
    */
    'withText'?: string;
  }
}

declare global {
  interface StencilElementInterfaces {
    'SlotIcon': Components.SlotIcon;
    'SlotPalugadabetBadge': Components.SlotPalugadabetBadge;
    'SlotPalugadabet': Components.SlotPalugadabet;
  }

  interface StencilIntrinsicElements {
    'slot-icon': Components.SlotIconAttributes;
    'slot-palugadabet-badge': Components.SlotPalugadabetBadgeAttributes;
    'slot-palugadabet': Components.SlotPalugadabetAttributes;
  }


  interface HTMLSlotIconElement extends Components.SlotIcon, HTMLStencilElement {}
  var HTMLSlotIconElement: {
    prototype: HTMLSlotIconElement;
    new (): HTMLSlotIconElement;
  };

  interface HTMLSlotPalugadabetBadgeElement extends Components.SlotPalugadabetBadge, HTMLStencilElement {}
  var HTMLSlotPalugadabetBadgeElement: {
    prototype: HTMLSlotPalugadabetBadgeElement;
    new (): HTMLSlotPalugadabetBadgeElement;
  };

  interface HTMLSlotPalugadabetElement extends Components.SlotPalugadabet, HTMLStencilElement {}
  var HTMLSlotPalugadabetElement: {
    prototype: HTMLSlotPalugadabetElement;
    new (): HTMLSlotPalugadabetElement;
  };

  interface HTMLElementTagNameMap {
    'slot-icon': HTMLSlotIconElement
    'slot-palugadabet-badge': HTMLSlotPalugadabetBadgeElement
    'slot-palugadabet': HTMLSlotPalugadabetElement
  }

  interface ElementTagNameMap {
    'slot-icon': HTMLSlotIconElement;
    'slot-palugadabet-badge': HTMLSlotPalugadabetBadgeElement;
    'slot-palugadabet': HTMLSlotPalugadabetElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
